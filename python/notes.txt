I will be taking notes while taking this course. This will be cumulative so there will be an update every video.
I am not taking notes of everything. Most stuff I may know already. I will be taking notes on stuff I would like to come back to.
I find it more difficult to create new notes.txt file in each section. I can easily come back to this file and search anything.



----------
01 Course Introduction

vid 001
Broad course to introduce you other topics such as building websites, game development, etc.
Walks through curriculum.

vid 002
Python2 vs Python3
Creator of python Guido van Rossum was unhappy of early python. so he overhaulted python and made changes
Pyth3 is not backwards compatible. Taken a long time for people to switch over. Python2.x is still used 
Python 3 is easier to learn. Many of the old complaints where fixed.
Python 2 will be retired. (Retired right now)

vid 003
course filled with exercises
Talks about exercise feature in Udemy

vid 004
flowchart on where you should start in the course
There is a MAC and PC section. everything will then dive into python syntax.

vid 005
explains how his videos are structured.

-----



----------
02 MACLINUX Command Line Fundamentals

vid 006
skipped section

vid 007
skipped section

vid 008
skipped section

vid 009
skipped section

vid 010
skipped section

vid 011
skipped section

vid 012
skipped section

vid 013
skipped section

vid 014
skipped section

vid 015
skipped section

vid 016
skipped section

-----



----------
03 WINDOWS Command Line Fundamentals

vid 017
cd 
ls
python filename

vid 018
mac vs PC
mac and linux has the same unix

windows has its different one
powershell allows users to mimic the most common unix commands
ls shows list

vid 019
talks about paths root directories.
~ is home directory
PWD shows you full absolute path of where you are 

vid 020
cd change directory
navigate relatively using . 
clear is used to clear powershell
cd ~ takes u to home directory
cd \ takes u to root of C:

vid 021
making folders and files
mkdir foldername

vid 022
creating file using powershell
echo $null >> slide.py //creates in UTF 16. python wants UTF 8
alternative
New-Item -ItemType file swings.py

vid 023
this video shows how to make powershell read touch. It is an alter in the powershell

vid 024
how to remove files
rm filename

to remove directory
rm -r -fo foldername
-r means recursive
-fo means force to prevent warnings

-----


----------
04 MAC Python Setup

vid 025
skipped section

vid 026
skipped section

vid 027
skipped section

vid 028
skipped section

vid 029
skipped section

-----



----------
05 WINDOWS Python Setup

vid 030
Installing python for windows.
Once installed, restart powershell/terminal

when you type python it opens a REPL
REPL : Read, Evaluate, Print, Loop

quit() to end 

vid 031
showing text editor sublime
shows basic use of sublime. color schemes

vid 032
show how to use print() function
show how to run python files.
python first_program.py
python <filename>
if it prints nothing. it ran it and no errors.

print() function
print("Hello!")
function prints out to shell/terminal

vid 033
skipped

vid 034
difference between typing 5 and print(5)
if you put 43+1 in python file. when running it executes but doesnt print anything.
-----



----------
06 Numbers Operators and Comments

vid 035
section introduce
take real world math and do it in python
how data is represented in code. store number of shoes. store age of user.
difference between ints and floats
work with simple math Operators
adding comments to code

vid 036
interger whole Numbers: positive or negative
floats are decimals also: postive or negative

decimals takes up more space than whole number

python is not just a calcutlaor but you can use it as one.

if any part of equation is a float. the answer is a float

vid 037
operators in math
+ addition
- subtraction
* multiplication
/ division
** exponentiation 
% modulo
// integer division

division always returns a float
PEMDAS

vid 038
comments are a way for us to write notes.
can make comments by using #
#
comments dont show in python output
comments help other developers 

vid 039
talks about
** :used to give a number to power.
% modulo; kinda like division but its the remainder operator. divides as many times as it can and then gives remainder.
used to see if a number is even or odd

// : interger division: if you dont want remainder float when dividing, it gives int value

vid 040
talks about python documentation.
use python 3.x on python.org
there are tutorials.
if you have a quetsionabout built in functions like print, it gives details of how it uses it

-----



----------
07 Variables and Strings

vid 041
Talks about variables and data types in this section (mostly strings)
how to assign and use variables
naming restrictions and conventions
different data types in pythonhow to convert data types
learn why python is called a dynamically type langauge
build a program to get user input

vid 042
variables are like containers that store data and can be obtained back
they can hold numbers booleans and strings
variables in python are like variables in math (e.g. 2x 4x 3x)

x = 100
mother_of_dragons = 1
print (mother_of_dragons + x)

most of data is not static. So we might not know what the value is.
variablename = variablevalue

variables can be assigned to other variables. reassigned at any time

vid 043
skipped

vid 044
naming restrictions
1. Variables have to start with a letter or underscore
_2cats is good

2. The rest of name must consist of letters numbers or underscores. (no @ symbols)

3. Names are case-sensitive!


Naming Conventions = most things people think you should do
most variables should be snake_case
camel case is camelCase

most variables should be lowercase

CAPITAL_SNAKE_CASE usually refers to constants
UpperCamelCase are referred to a class

variablkes that start and end with two underscores are called dunder.
dunders are private and should be left alone
__no_touchy__

vid 045
data types
in any assignment the value must be always a valid data type.

bool : true or false values
you could use a number to store a yes or no value. but if we only want true of false, you have more space for true or false than an integer
Python recognizes True and False only if its capital.



int : an integer (1, 2, 3)
str : string a sequence of unicode characters (example. Ricardo)
strings are characters. they are in between quotes

list : an ordered sequence of values of other data types (example. [1,2,3])
You can store data inside a list and theres an order


dict : a collection of key values (example {"first_name: "Ricardo", "last_name":"Deodutt"})
dictionary are pairs that are stored together. rather than two seperate values, you can store them together.

vid 046
dynamic typing
python is very flexiable about reassigning varaiables to different types
it allows us to have variables change type
None is another value that python recongizes as nothing.
c++ are statically typed. they are stuck to their original assigned type

vid 047
shwoing value None
None is a speical case like True or False
None represents an idea of nothing. In other languages its like null.
You want a child to exisit and have a container but there is nothing to put in there.

vid 048
declaring strings
you can use single or double quotes as long as your consistent
"" ''

vid 049
skipped

vid 050
string escape characters
in strings, we have specical squeiences that will be transformed by python to do something
\n will create a new line

to add a regular \ then you have to put \\

vid 051
skipped

vid 052
string concatenation
adding two strings together

vid 053
skipped

vid 054
formatting strings
interpolate
new way is F-Strings
print(f"test {x} was wrong!!)

there is another method called the format method.

vid 055
talks about udemy exercises. skipped

vid 056
skipped

vid 057
talks about index locations name[1] name[2]
talks about how to locate an index.

vid 058
data types
how to convert data types

you convert varaibles by using the name of the builtin type as a function
int(decimal)

str is reserved

vid 059
budiling a mileage converter
take km and convert them to miles
-----



----------
08 Boolean and Conditional Logic

vid 060
Introduction
its an important topics
boolean true or false
deciesions based on true or false
code to have multiple outcomes
learn how to get user input in python (continued)
truthiness

vid 061
input function
prompts user and stores the result in a varaible
whatever user types is stored in data
result is always a string and saved into the variable

vid 062
conditional statements
if somecondtion is true:
    do something
elif some other condition is true:
    do something
else:
    do something

you do not need an elif or else
you can have multiple elifs

== is used to check equality
= is used to assign

indentation matters
: matters. if not syntax error

vid 063
skipped

vid 064
skipped

vid 065 - logic.py
showing you can have mutliple elifs

vid 066
truthiness and falsyness
in python all conditional checks resolve to true or false.
thinbgs that are false conditions naturally falsy are empty objects, strings, None and zero. ***

if 0:
    print("YAY~")
if 1:
    print("yay??")

    this tells us the number 1 is truthy. 0 has an inherit falsyness

    any string that isnt empty  is truthiy.


vid 067
comparision operators lets us compare different operators
== turthity if a is equal to back a==b #true
!= truhity if a does not have the same vlaue as b a != b #false
> truthy if a is greater than b a > b #false
< truthy if a is less than b #false
>= truthy if a is greater than or equal to b #true
<= truthy if a is less than or equal to  b #true

vid 068 - and.py or.py
combining comapraison operators to make logical operators 
let us make complex statements
and : both a and b need to be true.
or : either a or b need to be true
not

vid 069
skipped

vid 070
not logical operator
if not <value>
1 < 2 # true
not 1 < 2 #false

vid 071 optional?
how things are stored in memory in python
is vs "=="
whats the difference

the difference is == is checking if the values are the same. a is b is checking to see if they are stored in the same place in memeroy.

== checks values
is checks for if same in memory.

vid 072 - bouncer.py
bouncer code along

vid 073
skipped

vid 074
skipped

-----



----------
09 Rock Paper Scissors

vid 075
First of project section
A break from lecturing.
giving prompt

vid 076 - v1.py
walkthrough of rock paper scissors code

vid 077 - v2.py
refactored version of rock paper scissors code

vid 078
skipped

vid 079
giving a challenge
rock paper scissor code with a computer instead of a second local player
introducing randint function -> you need to import

vid 080
giving solution for vid079 challenge
import random
random.randint(0, 2) #gives a number including 0, 1, 2

how to make everything case sensitive
make the user input lowercase
hello.lower()

v4 has a little alter I did on my own

-----



----------
10 Looping in Python

vid 081
Introduction to Loops
used to automate and repeat things
print numbers 1 trough 7. You could have 7 prints
taking data and doing something to each of it

vid 082
skipped

vid 083 - for.py
basics of for loops
collection of data we can loop through.
[40, 32, 73]
"hello"
range(1, 10)
we can loop to them

[for] and [in] dont change

for item in iterable_object:
    #do something with item

an iteratable object is a collection of items like above. A list, a string, a range.

item  is a new variable that can be called whatever you want. temp variable

item references the current position of our iterator within the iterable. it will iterate over (go through) every item of the collection and then go away when it has visited all items.

range is a way to quickly generate numbers

vid 084 - range.py
explaining ranges in depth
ranges is traditionally used with for loops
and to know for loops you need ranges

ranges are simple ways ot generating sequences of numbers

range(7) gives you integers from 0 thru 6 

range(1, 8) gives you integers from 1 to 7

range(1, 10, 2) will give you odd numbers from 1 to 10. the 3rd number is the interveal. generate numbers from 1 to 10 (not including 10) and skipping two numbers

range(7, 0, -1) you will get the numbers 7 to 1

vid 085
skipped

vid 086 - repeater.py
quick exercise

vid 087 - numbers.py
more complex exercise

vid 088
while loops

while loops continue to execute while a certain condition is truthy.
while loops continue running. it can go forever if u dont have a termination
while loops could run 10k times or once.
if you have a set number of loops then use for loops

vid 089 - art.py
quick while and for loop exercise

vid 090 - sister.py
quick exercise using while loop that cannot be made with for loop

vid 091 - break.py
exiting loops in a controlled manner.
one case you want to quit early.
break gives us the ability to exit out while loops whenever we want.

vid 092
skipped
-----